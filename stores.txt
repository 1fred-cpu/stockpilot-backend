// "use client";
import React, { useEffect, useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogTrigger,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetFooter,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Skeleton } from "@/components/ui/skeleton";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/components/ui/use-toast"; // adjust if your project uses a different toast hook
import { Search, Grid, List, Settings, Trash2, Edit, ArrowRight } from "lucide-react";
import Link from "next/link";
import useStore from "../../utils/zustand"; // adjust path if needed
import { formatDistanceToNowStrict } from "date-fns";

type StoreItem = {
  id: string;
  name: string;
  address?: string;
  city?: string;
  country?: string;
  status?: "active" | "inactive";
  created_at?: string;
  manager?: string;
  currency?: string;
  // small KPI stubs - backend should supply these
  todays_sales?: number;
  low_stock_count?: number;
  total_products?: number;
};

export default function StoresPage() {
  const { toast } = useToast ? useToast() : { toast: (arg: any) => null }; // fallback if not using shadcn toast
  const setActiveStore = useStore((s: any) => s.setActiveStore);
  const getActiveStore = useStore((s: any) => s.getActiveStore);

  const [stores, setStores] = useState<StoreItem[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // UI state
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [query, setQuery] = useState("");
  const [filterStatus, setFilterStatus] = useState<"all" | "active" | "inactive">("all");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Drawer / detail state
  const [openStore, setOpenStore] = useState<StoreItem | null>(null);
  const activeStore = getActiveStore?.();

  useEffect(() => {
    let cancelled = false;
    setLoading(true);
    setError(null);

    // Replace with axiosInstance if you prefer
    fetch("/api/stores")
      .then(async (res) => {
        if (!res.ok) {
          const txt = await res.text();
          throw new Error(txt || "Failed to fetch stores");
        }
        return res.json();
      })
      .then((data) => {
        if (cancelled) return;
        // assume response shape: { stores: StoreItem[] } or an array
        const list: StoreItem[] = Array.isArray(data) ? data : data.stores ?? [];
        setStores(list);
      })
      .catch((err) => {
        if (cancelled) return;
        setError(err?.message || "Failed to load stores");
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, []);

  // Derived filtered list
  const filtered = useMemo(() => {
    return stores.filter((s) => {
      if (filterStatus !== "all" && s.status !== filterStatus) return false;
      if (!query) return true;
      const q = query.toLowerCase();
      return (
        (s.name || "").toLowerCase().includes(q) ||
        (s.address || "").toLowerCase().includes(q) ||
        (s.city || "").toLowerCase().includes(q) ||
        (s.manager || "").toLowerCase().includes(q)
      );
    });
  }, [stores, query, filterStatus]);

  const totalPages = Math.max(1, Math.ceil(filtered.length / itemsPerPage));
  useEffect(() => {
    if (currentPage > totalPages) setCurrentPage(1);
  }, [totalPages]);

  const paginated = filtered.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  // Quick actions (replace with real API calls)
  async function handleSwitchStore(store: StoreItem) {
    try {
      // Optionally call backend to set session store
      setActiveStore?.(store);
      toast?.({ title: "Switched store", description: `Now viewing ${store.name}` });
    } catch (err: any) {
      toast?.({ title: "Failed", description: err?.message || "Could not switch store", variant: "destructive" });
    }
  }

  async function handleDeleteStore(store: StoreItem) {
    if (!confirm(`Delete "${store.name}"? This action is irreversible.`)) return;
    try {
      // TODO: replace with real DELETE call
      const res = await fetch(`/api/stores/${store.id}`, { method: "DELETE" });
      if (!res.ok) throw new Error("Delete failed");
      setStores((prev) => prev.filter((s) => s.id !== store.id));
      setOpenStore(null);
      toast?.({ title: "Deleted", description: `${store.name} removed` });
    } catch (err: any) {
      toast?.({ title: "Failed", description: err?.message || "Delete failed", variant: "destructive" });
    }
  }

  function handleEditStore(store: StoreItem) {
    // navigate to edit page or open modal
    window.location.href = `/dashboard/stores/${store.id}/edit`;
  }

  // Utility: display small KPI badges
  function KpiRow({ label, value }: { label: string; value?: number | string }) {
    return (
      <div className="flex items-center gap-3">
        <div className="text-xs text-muted-foreground">{label}</div>
        <div className="font-medium">{value ?? "—"}</div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-semibold">Stores</h1>
          <p className="text-sm text-muted-foreground">Manage and switch between your business stores.</p>
        </div>

        <div className="flex items-center gap-3">
          <Input
            placeholder="Search stores, address or manager..."
            value={query}
            onChange={(e) => { setQuery(e.target.value); setCurrentPage(1); }}
            className="pl-9"
          />
          <div className="text-muted-foreground absolute ml-3 mt-2 pointer-events-none">
            <Search className="w-4 h-4" />
          </div>

          <Select onValueChange={(val) => { setFilterStatus(val as any); setCurrentPage(1); }}>
            <SelectTrigger className="w-[160px]">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="inactive">Inactive</SelectItem>
            </SelectContent>
          </Select>

          <div className="flex items-center gap-2">
            <Button variant={viewMode === "grid" ? "primary" : "ghost"} onClick={() => setViewMode("grid")}>
              <Grid className="w-4 h-4" />
            </Button>
            <Button variant={viewMode === "list" ? "primary" : "ghost"} onClick={() => setViewMode("list")}>
              <List className="w-4 h-4" />
            </Button>
          </div>

          <Link href="/dashboard/stores/create" className="w-full md:w-auto">
            <Button className="ml-2">Create Store</Button>
          </Link>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>All stores</span>
            <span className="text-sm text-muted-foreground">{stores.length} total</span>
          </CardTitle>
        </CardHeader>

        <CardContent>
          {loading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Array.from({ length: 6 }).map((_, i) => (
                <div key={i} className="space-y-3">
                  <Skeleton className="h-10 w-full" />
                  <Skeleton className="h-40 w-full" />
                </div>
              ))}
            </div>
          ) : error ? (
            <div className="p-8 text-center text-destructive">
              <p className="mb-2">Failed to load stores</p>
              <p className="text-sm">{error}</p>
            </div>
          ) : filtered.length === 0 ? (
            <div className="p-8 text-center">
              <p className="text-lg font-medium">No stores found</p>
              <p className="text-sm text-muted-foreground">Try adjusting filters or create a new store.</p>
            </div>
          ) : viewMode === "grid" ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {paginated.map((s) => (
                <div key={s.id} className="border rounded-lg p-4 flex flex-col justify-between">
                  <div>
                    <div className="flex items-start justify-between gap-3">
                      <div>
                        <h3 className="text-lg font-medium">{s.name}</h3>
                        <div className="text-sm text-muted-foreground">{s.address ? `${s.address} • ${s.city ?? ""}` : "No address"}</div>
                        <div className="text-xs text-muted-foreground mt-2">Created {s.created_at ? formatDistanceToNowStrict(new Date(s.created_at)) + " ago" : "—"}</div>
                      </div>

                      <div className="flex flex-col items-end gap-2">
                        <Badge variant={s.status === "active" ? undefined : "destructive"}>{s.status ?? "active"}</Badge>
                        <div className="text-xs text-muted-foreground">Products</div>
                        <div className="font-medium">{s.total_products ?? "—"}</div>
                      </div>
                    </div>

                    <div className="mt-4 grid grid-cols-2 gap-3">
                      <KpiRow label="Today's sales" value={s.todays_sales ?? 0} />
                      <KpiRow label="Low stock" value={s.low_stock_count ?? 0} />
                    </div>
                  </div>

                  <div className="flex items-center justify-between mt-4">
                    <div className="flex gap-2">
                      <Button size="sm" variant="ghost" onClick={() => setOpenStore(s)}>Details</Button>
                      <Button size="sm" variant="ghost" onClick={() => handleEditStore(s)}><Edit className="w-4 h-4" /></Button>
                    </div>

                    <div className="flex gap-2">
                      <Button size="sm" onClick={() => handleSwitchStore(s)}>Switch</Button>
                      <Button size="sm" variant="destructive" onClick={() => handleDeleteStore(s)}><Trash2 className="w-4 h-4" /></Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // List view (table)
            <>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Store</TableHead>
                    <TableHead>Location</TableHead>
                    <TableHead>Manager</TableHead>
                    <TableHead className="text-right">Products</TableHead>
                    <TableHead className="text-right">Low Stock</TableHead>
                    <TableHead className="text-right">Today's Sales</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {paginated.map((s) => (
                    <TableRow key={s.id}>
                      <TableCell className="font-medium">{s.name}</TableCell>
                      <TableCell>{s.city ?? s.address ?? "—"}</TableCell>
                      <TableCell>{s.manager ?? "—"}</TableCell>
                      <TableCell className="text-right">{s.total_products ?? "—"}</TableCell>
                      <TableCell className="text-right">
                        <Badge variant={s.low_stock_count && s.low_stock_count > 0 ? "secondary" : undefined}>
                          {s.low_stock_count ?? 0}
                        </Badge>
                      </TableCell>
                      <TableCell className="text-right">{s.todays_sales ?? 0}</TableCell>
                      <TableCell className="text-right">
                        <div className="flex items-center justify-end gap-2">
                          <Button size="sm" variant="ghost" onClick={() => setOpenStore(s)}>Details</Button>
                          <Button size="sm" onClick={() => handleSwitchStore(s)}>Switch</Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              {/* Pagination */}
              <div className="flex items-center justify-between mt-4">
                <div className="text-sm text-muted-foreground">
                  Showing {(currentPage - 1) * itemsPerPage + 1} - {Math.min(currentPage * itemsPerPage, filtered.length)} of {filtered.length}
                </div>
                <div className="flex items-center gap-2">
                  <Button variant="outline" size="sm" onClick={() => setCurrentPage((p) => Math.max(1, p - 1))} disabled={currentPage === 1}>
                    Prev
                  </Button>
                  <div className="px-3 text-sm">Page {currentPage} / {totalPages}</div>
                  <Button variant="outline" size="sm" onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages}>
                    Next
                  </Button>
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      {/* Store Details Drawer */}
      <Sheet open={!!openStore} onOpenChange={(open) => { if (!open) setOpenStore(null); }}>
        <SheetContent size="lg" position="right">
          {openStore ? (
            <>
              <SheetHeader>
                <SheetTitle>{openStore.name}</SheetTitle>
              </SheetHeader>

              <div className="p-4 space-y-4">
                <div className="flex items-start justify-between gap-4">
                  <div>
                    <div className="text-sm text-muted-foreground">{openStore.address}</div>
                    <div className="text-xs text-muted-foreground mt-2">Created {openStore.created_at ? formatDistanceToNowStrict(new Date(openStore.created_at)) + " ago" : "—"}</div>
                  </div>

                  <div className="text-right">
                    <Badge variant={openStore.status === "active" ? undefined : "destructive"}>{openStore.status}</Badge>
                    <div className="mt-2 text-sm">Manager</div>
                    <div className="font-medium">{openStore.manager ?? "—"}</div>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Today's Sales</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-xl font-semibold">{openStore.todays_sales ?? 0}</div>
                      <div className="text-xs text-muted-foreground">Transactions today</div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Inventory Health</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex flex-col gap-2">
                        <KpiRow label="Low stock" value={openStore.low_stock_count ?? 0} />
                        <KpiRow label="Total products" value={openStore.total_products ?? 0} />
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Quick Actions</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex flex-col gap-2">
                        <Button onClick={() => handleSwitchStore(openStore)} className="w-full">Switch to this store</Button>
                        <Button variant="outline" onClick={() => handleEditStore(openStore)} className="w-full">Edit store</Button>
                        <Button variant="destructive" onClick={() => handleDeleteStore(openStore)} className="w-full">Delete store</Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <div>
                  <h4 className="text-sm font-medium mb-2">More Info</h4>
                  <div className="text-sm text-muted-foreground">
                    {/* expand this section with manager contact, opening hours, address map embed, recent alerts etc */}
                    <div><strong>Currency:</strong> {openStore.currency ?? "—"}</div>
                    <div><strong>Store ID:</strong> {openStore.id}</div>
                  </div>
                </div>
              </div>
            </>
          ) : null}
        </SheetContent>
      </Sheet>
    </div>
  );
}